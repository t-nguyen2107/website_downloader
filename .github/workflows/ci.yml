name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Reduce matrix size for faster CI
          - os: macos-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.9'
          - os: windows-latest
            python-version: '3.8'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock responses
        pip install black isort flake8 mypy bandit

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Check code formatting with Black
      run: |
        black --check --diff .

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .

    - name: Type check with MyPy
      run: |
        mypy . --ignore-missing-imports
      continue-on-error: true  # MyPy can be strict, don't fail CI

    - name: Security check with Bandit
      run: |
        bandit -r . -f json -o bandit-report.json
      continue-on-error: true

    - name: Upload Bandit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-report-${{ matrix.os }}-${{ matrix.python-version }}
        path: bandit-report.json

    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'schedule'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-mock responses

    - name: Run integration tests
      run: |
        pytest tests/ -v -m "integration" --tb=short
      env:
        # Set environment variables for integration tests
        INTEGRATION_TEST: true
        TEST_TIMEOUT: 30

    - name: Test quick start script
      run: |
        python quick_start.py
      timeout-minutes: 5

  build-docs:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install sphinx sphinx-rtd-theme

    - name: Check documentation
      run: |
        # Check that all markdown files are valid
        python -c "import markdown; [markdown.markdown(open(f).read()) for f in ['README.md', 'CONTRIBUTING.md', 'CHANGELOG.md']]"
        
        # Check that examples in docs are valid Python
        python -m py_compile docs/examples.md || echo "Examples file is markdown, skipping compile check"
        
        # Validate JSON configuration examples
        python -c "import json; json.load(open('config_example.json'))"
        echo "Documentation checks passed"

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  performance-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark

    - name: Run performance tests
      run: |
        pytest tests/ -v -m "performance" --benchmark-only --benchmark-json=benchmark.json
      continue-on-error: true

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: benchmark-results
        path: benchmark.json

  compatibility-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Test with minimal dependencies
      run: |
        python -m pip install --upgrade pip
        # Install only core dependencies
        pip install requests beautifulsoup4 lxml
        python -c "from website_downloader import WebsiteDownloader; print('Basic import successful')"
        python -c "from advanced_downloader import AdvancedWebsiteDownloader; print('Advanced import successful')"

    - name: Test with all optional dependencies
      run: |
        pip install selenium aiohttp tqdm
        python -c "from website_downloader import WebsiteDownloader; from advanced_downloader import AdvancedWebsiteDownloader; print('All imports successful')"

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy bandit pylint
        pip install -r requirements.txt

    - name: Run comprehensive code quality checks
      run: |
        echo "Running Black..."
        black --check --diff . || echo "Black formatting issues found"
        
        echo "Running isort..."
        isort --check-only --diff . || echo "Import sorting issues found"
        
        echo "Running flake8..."
        flake8 . || echo "Flake8 issues found"
        
        echo "Running MyPy..."
        mypy . --ignore-missing-imports || echo "MyPy issues found"
        
        echo "Running Bandit..."
        bandit -r . || echo "Bandit security issues found"
        
        echo "Running Pylint..."
        pylint website_downloader.py advanced_downloader.py || echo "Pylint issues found"
        
        echo "Code quality checks completed"

  release-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test, integration-test, build-docs, security-scan]
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for version checking

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Check if release is needed
      run: |
        # Check if version in pyproject.toml has changed
        if git diff HEAD~1 HEAD --name-only | grep -q "pyproject.toml"; then
          echo "pyproject.toml changed, checking version..."
          # Extract version from pyproject.toml
          VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "Current version: $VERSION"
          
          # Check if tag exists
          if git tag -l | grep -q "^v$VERSION$"; then
            echo "Tag v$VERSION already exists"
          else
            echo "New version detected: $VERSION"
            echo "SHOULD_RELEASE=true" >> $GITHUB_ENV
            echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
          fi
        else
          echo "No version changes detected"
        fi

    - name: Create Release
      if: env.SHOULD_RELEASE == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.RELEASE_VERSION }}
        release_name: Release v${{ env.RELEASE_VERSION }}
        body: |
          Automated release for version ${{ env.RELEASE_VERSION }}
          
          See [CHANGELOG.md](CHANGELOG.md) for details.
        draft: true
        prerelease: false